plugins {
    id "org.asciidoctor.jvm.convert" version "4.0.4"
}

configurations {
    asciidoctorExt
}

repositories {
    mavenCentral()
}

tasks.getByName("bootJar") {
    enabled = true
}

tasks.getByName("jar") {
    enabled = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    // rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor:3.0.3'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured:3.0.3'

    testImplementation "org.testcontainers:testcontainers:1.20.4"
    testImplementation "org.testcontainers:junit-jupiter:1.20.4"
    testImplementation "org.testcontainers:mysql:1.20.4"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
}

tasks.register("prepareKotlinBuildScriptModel") {}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

task testDocument(type: Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching "*.documentation.*"
    }
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}
