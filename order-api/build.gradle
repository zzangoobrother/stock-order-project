plugins {
    id 'com.github.davidmc24.gradle.plugin.avro' version '1.9.1' // 아브로 플러그인 추가
    id "org.asciidoctor.jvm.convert" version "4.0.4"
}

configurations {
    asciidoctorExt
}

generateAvroJava { // 아브로 스키마 생성
    source("src/main/resources/avro")
    include("**/*.avsc")
}

repositories {
    mavenCentral()
    maven {
        url 'https://packages.confluent.io/maven/' // 아브로 레포지토리 추가
    }
}

tasks.getByName("bootJar") {
    enabled = true
}

tasks.getByName("jar") {
    enabled = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'io.confluent:kafka-avro-serializer:7.9.0' // 아프로 시리얼라이저
    implementation 'org.apache.avro:avro:1.12.0'

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor:3.0.3'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured:3.0.3'

    testImplementation "org.testcontainers:testcontainers:1.20.4"
    testImplementation "org.testcontainers:junit-jupiter:1.20.4"
    testImplementation "org.testcontainers:mysql:1.20.4"
    testImplementation "org.testcontainers:kafka:1.20.4"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
}

tasks.register("prepareKotlinBuildScriptModel") {}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

task testDocument(type: Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching "*.documentation.*"
    }
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}
